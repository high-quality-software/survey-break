//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FIDOVictory.Common.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntityContainer : DbContext
    {
        public EntityContainer()
            : base("name=EntityContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AttachmentType> AttachmentTypes { get; set; }
        public virtual DbSet<ChemicalMaster> ChemicalMasters { get; set; }
        public virtual DbSet<ChemicalType> ChemicalTypes { get; set; }
        public virtual DbSet<Crop> Crops { get; set; }
        public virtual DbSet<DB_Version> DB_Version { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Response> Responses { get; set; }
        public virtual DbSet<SiteMaster> SiteMasters { get; set; }
        public virtual DbSet<TraitMaster> TraitMasters { get; set; }
        public virtual DbSet<TrialCatalog> TrialCatalogs { get; set; }
        public virtual DbSet<TrialProgress> TrialProgresses { get; set; }
        public virtual DbSet<TrialWorkflowAttachment> TrialWorkflowAttachments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkflowQuestion> WorkflowQuestions { get; set; }
        public virtual DbSet<SRR_EvalResponse> SRR_EvalResponse { get; set; }
        public virtual DbSet<SRRUser_Trial_Xref> SRRUser_Trial_Xref { get; set; }
        public virtual DbSet<v_UserTrials> v_UserTrials { get; set; }
        public virtual DbSet<LookupMaster> LookupMasters { get; set; }
        public virtual DbSet<TrialNote> TrialNotes { get; set; }
    
        public virtual int usp_ReceiveResponses(Nullable<int> trialID, Nullable<int> workflowID, Nullable<bool> answered, Nullable<bool> locked, Nullable<System.DateTime> dueDate, Nullable<int> sRRUserID, string updateUserID, string responses)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            var answeredParameter = answered.HasValue ?
                new ObjectParameter("answered", answered) :
                new ObjectParameter("answered", typeof(bool));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("locked", locked) :
                new ObjectParameter("locked", typeof(bool));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("dueDate", dueDate) :
                new ObjectParameter("dueDate", typeof(System.DateTime));
    
            var sRRUserIDParameter = sRRUserID.HasValue ?
                new ObjectParameter("SRRUserID", sRRUserID) :
                new ObjectParameter("SRRUserID", typeof(int));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            var responsesParameter = responses != null ?
                new ObjectParameter("responses", responses) :
                new ObjectParameter("responses", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ReceiveResponses", trialIDParameter, workflowIDParameter, answeredParameter, lockedParameter, dueDateParameter, sRRUserIDParameter, updateUserIDParameter, responsesParameter);
        }
    
        public virtual int usp_DeleteTrialProgress_Response(Nullable<int> arg_Trial_ID, string arg_Userid)
        {
            var arg_Trial_IDParameter = arg_Trial_ID.HasValue ?
                new ObjectParameter("arg_Trial_ID", arg_Trial_ID) :
                new ObjectParameter("arg_Trial_ID", typeof(int));
    
            var arg_UseridParameter = arg_Userid != null ?
                new ObjectParameter("arg_Userid", arg_Userid) :
                new ObjectParameter("arg_Userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteTrialProgress_Response", arg_Trial_IDParameter, arg_UseridParameter);
        }
    
        public virtual ObjectResult<usp_GetFormStatusForAdminRoleSince_Result> usp_GetFormStatusForAdminRoleSince(string userAlias, Nullable<System.DateTime> lastSync)
        {
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            var lastSyncParameter = lastSync.HasValue ?
                new ObjectParameter("lastSync", lastSync) :
                new ObjectParameter("lastSync", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFormStatusForAdminRoleSince_Result>("usp_GetFormStatusForAdminRoleSince", userAliasParameter, lastSyncParameter);
        }
    
        public virtual ObjectResult<usp_GetFormData_Result> usp_GetFormData(string userAlias, Nullable<System.DateTime> lastSync)
        {
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            var lastSyncParameter = lastSync.HasValue ?
                new ObjectParameter("lastSync", lastSync) :
                new ObjectParameter("lastSync", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFormData_Result>("usp_GetFormData", userAliasParameter, lastSyncParameter);
        }
    
        public virtual ObjectResult<usp_Get_Compliance_Status_Result> usp_Get_Compliance_Status(string userAlias)
        {
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_Compliance_Status_Result>("usp_Get_Compliance_Status", userAliasParameter);
        }
    
        public virtual ObjectResult<usp_PaginatedList_Trials_Result> usp_PaginatedList_Trials(Nullable<int> page, Nullable<int> pageSize, Nullable<int> trialID_Filter, string trialName_Filter, string multipleColumns_Filter, Nullable<int> workflowID_Filter, Nullable<int> statusID_Filter, string userAlias)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var trialID_FilterParameter = trialID_Filter.HasValue ?
                new ObjectParameter("trialID_Filter", trialID_Filter) :
                new ObjectParameter("trialID_Filter", typeof(int));
    
            var trialName_FilterParameter = trialName_Filter != null ?
                new ObjectParameter("trialName_Filter", trialName_Filter) :
                new ObjectParameter("trialName_Filter", typeof(string));
    
            var multipleColumns_FilterParameter = multipleColumns_Filter != null ?
                new ObjectParameter("multipleColumns_Filter", multipleColumns_Filter) :
                new ObjectParameter("multipleColumns_Filter", typeof(string));
    
            var workflowID_FilterParameter = workflowID_Filter.HasValue ?
                new ObjectParameter("workflowID_Filter", workflowID_Filter) :
                new ObjectParameter("workflowID_Filter", typeof(int));
    
            var statusID_FilterParameter = statusID_Filter.HasValue ?
                new ObjectParameter("statusID_Filter", statusID_Filter) :
                new ObjectParameter("statusID_Filter", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaginatedList_Trials_Result>("usp_PaginatedList_Trials", pageParameter, pageSizeParameter, trialID_FilterParameter, trialName_FilterParameter, multipleColumns_FilterParameter, workflowID_FilterParameter, statusID_FilterParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_Get_FormStatus_ByTrialID_Result> usp_Get_FormStatus_ByTrialID(Nullable<int> trialID, string userAlias)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_FormStatus_ByTrialID_Result>("usp_Get_FormStatus_ByTrialID", trialIDParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_GetFormData_ByTrialID_Result> usp_GetFormData_ByTrialID(Nullable<int> trialID, string userAlias)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFormData_ByTrialID_Result>("usp_GetFormData_ByTrialID", trialIDParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_Get_Compliance_Status_ByTrial_ID_Result> usp_Get_Compliance_Status_ByTrial_ID(Nullable<int> trialID, string userAlias)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_Compliance_Status_ByTrial_ID_Result>("usp_Get_Compliance_Status_ByTrial_ID", trialIDParameter, userAliasParameter);
        }
    }
}
