//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FIDOVictory.AdminTool.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class REGFIELDTRIALSEntities : DbContext
    {
        public REGFIELDTRIALSEntities()
            : base("name=REGFIELDTRIALSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AttachmentType> AttachmentTypes { get; set; }
        public virtual DbSet<ChemicalMaster> ChemicalMasters { get; set; }
        public virtual DbSet<ChemicalType> ChemicalTypes { get; set; }
        public virtual DbSet<Crop> Crops { get; set; }
        public virtual DbSet<DB_Version> DB_Version { get; set; }
        public virtual DbSet<LookupMaster> LookupMasters { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Response> Responses { get; set; }
        public virtual DbSet<SiteMaster> SiteMasters { get; set; }
        public virtual DbSet<SRR_EvalResponse> SRR_EvalResponse { get; set; }
        public virtual DbSet<SRRUser_Trial_Xref> SRRUser_Trial_Xref { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TraitMaster> TraitMasters { get; set; }
        public virtual DbSet<TrialCatalog> TrialCatalogs { get; set; }
        public virtual DbSet<TrialNote> TrialNotes { get; set; }
        public virtual DbSet<TrialProgress> TrialProgresses { get; set; }
        public virtual DbSet<TrialWorkflowAttachment> TrialWorkflowAttachments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkflowQuestion> WorkflowQuestions { get; set; }
    
        public virtual ObjectResult<usp_Assign_PrimarySRR_ToTrial_Result> usp_Assign_PrimarySRR_ToTrial(Nullable<int> userID, Nullable<int> trialID, string updateUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Assign_PrimarySRR_ToTrial_Result>("usp_Assign_PrimarySRR_ToTrial", userIDParameter, trialIDParameter, updateUserIDParameter);
        }
    
        public virtual ObjectResult<usp_Create_User_Result> usp_Create_User(string userAlias, Nullable<int> userTypeID, string fName, string lName, string email, string officeNumber, string cellNumber, string siteLocation, Nullable<int> managerID, Nullable<bool> @internal, string updateUserID)
        {
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("userTypeID", userTypeID) :
                new ObjectParameter("userTypeID", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("fName", fName) :
                new ObjectParameter("fName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var officeNumberParameter = officeNumber != null ?
                new ObjectParameter("officeNumber", officeNumber) :
                new ObjectParameter("officeNumber", typeof(string));
    
            var cellNumberParameter = cellNumber != null ?
                new ObjectParameter("cellNumber", cellNumber) :
                new ObjectParameter("cellNumber", typeof(string));
    
            var siteLocationParameter = siteLocation != null ?
                new ObjectParameter("siteLocation", siteLocation) :
                new ObjectParameter("siteLocation", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("managerID", managerID) :
                new ObjectParameter("managerID", typeof(int));
    
            var internalParameter = @internal.HasValue ?
                new ObjectParameter("internal", @internal) :
                new ObjectParameter("internal", typeof(bool));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Create_User_Result>("usp_Create_User", userAliasParameter, userTypeIDParameter, fNameParameter, lNameParameter, emailParameter, officeNumberParameter, cellNumberParameter, siteLocationParameter, managerIDParameter, internalParameter, updateUserIDParameter);
        }
    
        public virtual ObjectResult<usp_Delete_Trial_ByTrialID_Result> usp_Delete_Trial_ByTrialID(Nullable<int> trialID, string updateuserID)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var updateuserIDParameter = updateuserID != null ?
                new ObjectParameter("updateuserID", updateuserID) :
                new ObjectParameter("updateuserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Delete_Trial_ByTrialID_Result>("usp_Delete_Trial_ByTrialID", trialIDParameter, updateuserIDParameter);
        }
    
        public virtual ObjectResult<usp_Delete_User_ByUserID_Result> usp_Delete_User_ByUserID(Nullable<int> userID, string updateuserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var updateuserIDParameter = updateuserID != null ?
                new ObjectParameter("updateuserID", updateuserID) :
                new ObjectParameter("updateuserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Delete_User_ByUserID_Result>("usp_Delete_User_ByUserID", userIDParameter, updateuserIDParameter);
        }
    
        public virtual ObjectResult<usp_Get_FormStatus_ByTrialID_Result> usp_Get_FormStatus_ByTrialID(Nullable<int> trialID, string userAlias)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_FormStatus_ByTrialID_Result>("usp_Get_FormStatus_ByTrialID", trialIDParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_Get_User_ByUserAlias_Result> usp_Get_User_ByUserAlias(string userAlias)
        {
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_User_ByUserAlias_Result>("usp_Get_User_ByUserAlias", userAliasParameter);
        }
    
        public virtual ObjectResult<usp_Get_User_ByUserID_Result> usp_Get_User_ByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_User_ByUserID_Result>("usp_Get_User_ByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<usp_PaginatedList_TrialMaps_Result> usp_PaginatedList_TrialMaps(Nullable<int> page, Nullable<int> pageSize, Nullable<int> trialID_Filter, string trialName_Filter, string userAlias)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var trialID_FilterParameter = trialID_Filter.HasValue ?
                new ObjectParameter("trialID_Filter", trialID_Filter) :
                new ObjectParameter("trialID_Filter", typeof(int));
    
            var trialName_FilterParameter = trialName_Filter != null ?
                new ObjectParameter("trialName_Filter", trialName_Filter) :
                new ObjectParameter("trialName_Filter", typeof(string));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaginatedList_TrialMaps_Result>("usp_PaginatedList_TrialMaps", pageParameter, pageSizeParameter, trialID_FilterParameter, trialName_FilterParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_PaginatedList_Trials_Result> usp_PaginatedList_Trials(Nullable<int> page, Nullable<int> pageSize, Nullable<int> trialID_Filter, string trialName_Filter, string userAlias)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var trialID_FilterParameter = trialID_Filter.HasValue ?
                new ObjectParameter("trialID_Filter", trialID_Filter) :
                new ObjectParameter("trialID_Filter", typeof(int));
    
            var trialName_FilterParameter = trialName_Filter != null ?
                new ObjectParameter("trialName_Filter", trialName_Filter) :
                new ObjectParameter("trialName_Filter", typeof(string));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaginatedList_Trials_Result>("usp_PaginatedList_Trials", pageParameter, pageSizeParameter, trialID_FilterParameter, trialName_FilterParameter, userAliasParameter);
        }
    
        public virtual ObjectResult<usp_PaginatedList_Users_Result> usp_PaginatedList_Users(Nullable<int> page, Nullable<int> pageSize, Nullable<int> userTypeID_Filter, string string_Filter)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var userTypeID_FilterParameter = userTypeID_Filter.HasValue ?
                new ObjectParameter("userTypeID_Filter", userTypeID_Filter) :
                new ObjectParameter("userTypeID_Filter", typeof(int));
    
            var string_FilterParameter = string_Filter != null ?
                new ObjectParameter("string_Filter", string_Filter) :
                new ObjectParameter("string_Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaginatedList_Users_Result>("usp_PaginatedList_Users", pageParameter, pageSizeParameter, userTypeID_FilterParameter, string_FilterParameter);
        }
    
        public virtual ObjectResult<usp_Update_User_Result> usp_Update_User(Nullable<int> userID, string userAlias, Nullable<int> userTypeID, string fName, string lName, string email, string officeNumber, string cellNumber, string siteLocation, Nullable<int> managerID, Nullable<bool> @internal, string updateUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userAliasParameter = userAlias != null ?
                new ObjectParameter("userAlias", userAlias) :
                new ObjectParameter("userAlias", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("userTypeID", userTypeID) :
                new ObjectParameter("userTypeID", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("fName", fName) :
                new ObjectParameter("fName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var officeNumberParameter = officeNumber != null ?
                new ObjectParameter("officeNumber", officeNumber) :
                new ObjectParameter("officeNumber", typeof(string));
    
            var cellNumberParameter = cellNumber != null ?
                new ObjectParameter("cellNumber", cellNumber) :
                new ObjectParameter("cellNumber", typeof(string));
    
            var siteLocationParameter = siteLocation != null ?
                new ObjectParameter("siteLocation", siteLocation) :
                new ObjectParameter("siteLocation", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("managerID", managerID) :
                new ObjectParameter("managerID", typeof(int));
    
            var internalParameter = @internal.HasValue ?
                new ObjectParameter("internal", @internal) :
                new ObjectParameter("internal", typeof(bool));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Update_User_Result>("usp_Update_User", userIDParameter, userAliasParameter, userTypeIDParameter, fNameParameter, lNameParameter, emailParameter, officeNumberParameter, cellNumberParameter, siteLocationParameter, managerIDParameter, internalParameter, updateUserIDParameter);
        }
    
        public virtual ObjectResult<usp_Create_Trial_Result> usp_Create_Trial(Nullable<int> trial_ID, string name, Nullable<int> sRRLeadUser_ID, Nullable<int> iRPUser_ID, Nullable<int> cropID, Nullable<int> traitID, Nullable<int> siteID, Nullable<int> trialYear, Nullable<bool> @internal, string city, string state, string zip, string county, string farmName, string complianceStatus, string updateUserID)
        {
            var trial_IDParameter = trial_ID.HasValue ?
                new ObjectParameter("trial_ID", trial_ID) :
                new ObjectParameter("trial_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var sRRLeadUser_IDParameter = sRRLeadUser_ID.HasValue ?
                new ObjectParameter("SRRLeadUser_ID", sRRLeadUser_ID) :
                new ObjectParameter("SRRLeadUser_ID", typeof(int));
    
            var iRPUser_IDParameter = iRPUser_ID.HasValue ?
                new ObjectParameter("IRPUser_ID", iRPUser_ID) :
                new ObjectParameter("IRPUser_ID", typeof(int));
    
            var cropIDParameter = cropID.HasValue ?
                new ObjectParameter("cropID", cropID) :
                new ObjectParameter("cropID", typeof(int));
    
            var traitIDParameter = traitID.HasValue ?
                new ObjectParameter("traitID", traitID) :
                new ObjectParameter("traitID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var trialYearParameter = trialYear.HasValue ?
                new ObjectParameter("trialYear", trialYear) :
                new ObjectParameter("trialYear", typeof(int));
    
            var internalParameter = @internal.HasValue ?
                new ObjectParameter("internal", @internal) :
                new ObjectParameter("internal", typeof(bool));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var farmNameParameter = farmName != null ?
                new ObjectParameter("farmName", farmName) :
                new ObjectParameter("farmName", typeof(string));
    
            var complianceStatusParameter = complianceStatus != null ?
                new ObjectParameter("complianceStatus", complianceStatus) :
                new ObjectParameter("complianceStatus", typeof(string));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Create_Trial_Result>("usp_Create_Trial", trial_IDParameter, nameParameter, sRRLeadUser_IDParameter, iRPUser_IDParameter, cropIDParameter, traitIDParameter, siteIDParameter, trialYearParameter, internalParameter, cityParameter, stateParameter, zipParameter, countyParameter, farmNameParameter, complianceStatusParameter, updateUserIDParameter);
        }
    
        public virtual ObjectResult<usp_Get_Trial_ByTrialID_Result> usp_Get_Trial_ByTrialID(Nullable<int> trialID)
        {
            var trialIDParameter = trialID.HasValue ?
                new ObjectParameter("trialID", trialID) :
                new ObjectParameter("trialID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_Trial_ByTrialID_Result>("usp_Get_Trial_ByTrialID", trialIDParameter);
        }
    
        public virtual ObjectResult<usp_Update_Trial_Result> usp_Update_Trial(Nullable<int> trial_ID, string name, Nullable<int> sRRLeadUser_ID, Nullable<int> iRPUser_ID, Nullable<int> cropID, Nullable<int> traitID, Nullable<int> siteID, Nullable<int> trialYear, Nullable<bool> @internal, string city, string state, string zip, string county, string farmName, string complianceStatus, string updateUserID)
        {
            var trial_IDParameter = trial_ID.HasValue ?
                new ObjectParameter("trial_ID", trial_ID) :
                new ObjectParameter("trial_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var sRRLeadUser_IDParameter = sRRLeadUser_ID.HasValue ?
                new ObjectParameter("SRRLeadUser_ID", sRRLeadUser_ID) :
                new ObjectParameter("SRRLeadUser_ID", typeof(int));
    
            var iRPUser_IDParameter = iRPUser_ID.HasValue ?
                new ObjectParameter("IRPUser_ID", iRPUser_ID) :
                new ObjectParameter("IRPUser_ID", typeof(int));
    
            var cropIDParameter = cropID.HasValue ?
                new ObjectParameter("cropID", cropID) :
                new ObjectParameter("cropID", typeof(int));
    
            var traitIDParameter = traitID.HasValue ?
                new ObjectParameter("traitID", traitID) :
                new ObjectParameter("traitID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var trialYearParameter = trialYear.HasValue ?
                new ObjectParameter("trialYear", trialYear) :
                new ObjectParameter("trialYear", typeof(int));
    
            var internalParameter = @internal.HasValue ?
                new ObjectParameter("internal", @internal) :
                new ObjectParameter("internal", typeof(bool));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var farmNameParameter = farmName != null ?
                new ObjectParameter("farmName", farmName) :
                new ObjectParameter("farmName", typeof(string));
    
            var complianceStatusParameter = complianceStatus != null ?
                new ObjectParameter("complianceStatus", complianceStatus) :
                new ObjectParameter("complianceStatus", typeof(string));
    
            var updateUserIDParameter = updateUserID != null ?
                new ObjectParameter("updateUserID", updateUserID) :
                new ObjectParameter("updateUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Update_Trial_Result>("usp_Update_Trial", trial_IDParameter, nameParameter, sRRLeadUser_IDParameter, iRPUser_IDParameter, cropIDParameter, traitIDParameter, siteIDParameter, trialYearParameter, internalParameter, cityParameter, stateParameter, zipParameter, countyParameter, farmNameParameter, complianceStatusParameter, updateUserIDParameter);
        }
    }
}
